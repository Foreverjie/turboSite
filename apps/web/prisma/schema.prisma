// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model Cat {
  id   Int    @id @default(autoincrement()) @map("_id")
  name String
}

model User {
  id       Int    @id @default(autoincrement())
  userId   String @unique
  name     String
  email    String @unique
  gender   Gender?
  phone    String? @unique
  role     UserType @default(USER)
  avatar   String @default("https://gravatar.com/avatar/placeholder?s=200")
  status   UserStatus @default(NEED_ONBOARDING)

  // posts    Post[] @relation(fields: [postIDs], references: [id], name: "posts")
  // postIDs    String[] @db.ObjectId

  // likes   Post[]   @relation(fields: [likeIDs], references: [id], name: "likes")
  // likeIDs Int[] @db.ObjectId

  likes Post[] @relation(name: "likes")
  // comments Comment[] @relation(fields: [commentIDs], references: [id], name: "comments")
  // commentIDs String[] @db.ObjectId

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Post      Post[]
  Comment   Comment[]
}

model Post {
  id   Int      @id @default(autoincrement())
  type PostType @default(POST)

  repostId Int?
  repost   Post?  @relation("repost", fields: [repostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  repostBy Post[] @relation("repost")

  likeBy User[] @relation(name: "likes")

  content String
  files   String[]

  comments Comment[]

  author   User @relation(fields: [authorId], references: [userId])
  authorId String

  isBlocked Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([authorId])
  @@index([repostId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([authorId])
  @@index([postId])
}

enum PostType {
  POST
  REPOST
}

enum UserType {
  USER
  PERMIUM
  ADMIN
}

enum UserStatus {
  NEED_ONBOARDING
  INFORMATION_INCOMPLETE
  ACTIVE
  ERROR
  LOCKED
}

enum Gender {
  MALE
  FEMALE
  SECRET
}
