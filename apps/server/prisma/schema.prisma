// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Cat {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  password String
  role     String @default("user")
  avatar   String @default("https://gravatar.com/avatar/placeholder?s=200")

  // posts    Post[] @relation(fields: [postIDs], references: [id], name: "posts")
  // postIDs    String[] @db.ObjectId

  likes   Post[]   @relation(fields: [likeIDs], references: [id], name: "likes")
  likeIDs String[] @db.ObjectId

  // comments Comment[] @relation(fields: [commentIDs], references: [id], name: "comments")
  // commentIDs String[] @db.ObjectId

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Post      Post[]
  Comment   Comment[]
}

model Post {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  type PostType @default(POST)

  repostId String? @db.ObjectId
  repost   Post?   @relation("repost", fields: [repostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  repostBy Post[]  @relation("repost")

  likeBy    User[]   @relation(fields: [likeByIds], references: [id], name: "likes")
  likeByIds String[] @db.ObjectId

  content String
  files   String[]

  comments Comment[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  isBlocked Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PostType {
  POST
  REPOST
}
